#lang plai-typed

(require "inf.rkt")
(require (typed-in racket/base [gensym : (symbol -> symbol)]))

(define PRETTY (list 'a 'b 'c 'd 'e 'f 'g 'h 'i 'j 'k 'l 'm 'n 'o 'p 'q 'r 's 't 'u 'v 'w 'x 'y 'z))

(define (readable-map list fxn)
  (map fxn list))

(define-type Constraint
  (eqCon (lhs : Term) (rhs : Term)))

(define-type Term
  (tExp (e : ExprS))
  (tVar (s : symbol))
  (tList (t : Term))
  (tNum)
  (tBool)
  (tArrow (i : Term) (o : Term)))
  
(define-type Rebinding
  (rebind (from : symbol)
          (to   : symbol)))

;; make all symbols globally unique, but still match on scope
(define (make-unique (ast : ExprS) (map : (listof Rebinding))) : ExprS
   (type-case ExprS ast
     (numS  (n)     (numS n))
     (boolS (b)     (boolS b))
     (temptyS ()    (temptyS))
     (plusS (a b)   (plusS (make-unique a map) (make-unique b map)))
     (multS (a b)   (multS (make-unique a map) (make-unique b map)))
     (bminusS (a b) (bminusS (make-unique a map) (make-unique b map)))
     (iszeroS (a)   (iszeroS (make-unique a map)))
     (tisEmptyS (a) (tisEmptyS (make-unique a map)))
     (tconsS (f r)  (tconsS (make-unique f map) (make-unique r map)))
     (bifS (c t f)  (bifS (make-unique c map) (make-unique t map) (make-unique f map)))
     (tfirstS (l)   (tfirstS (make-unique l map)))
     (trestS (l)    (trestS (make-unique l map)))
     (appS (f a)    (appS (make-unique f map) (make-unique a map)))
     (withS (b t e) (let ((new (gensym b))) (withS new (make-unique t map) (make-unique e (cons (rebind b new) map)))))
     (recS (b t e)  (let ((new (gensym b))) (recS new (make-unique t map) (make-unique e (cons (rebind b new) map)))))
     (lamS (p b)    (let ((new (gensym p))) (lamS new (make-unique b (cons (rebind p new) map)))))
     (idS (n)       (idS (lookup n map)))))

;; get a symbol from a list
(define (lookup (s : symbol) (map : (listof Rebinding))) : symbol
  (let ((match (filter (λ (each) (symbol=? s (rebind-from each))) map)))
    (cond ((empty? match) s)
          ((cons? match) (rebind-to (first match))))))

;; append three lists together
(define (tripend a b c)
  (append a (append b c)))
;; append four lists together
(define (quapend a b c d)
  (append (append a b) (append c d)))


;; build constraint list
(define (bc (ast : ExprS)) : (listof Constraint)
  (type-case ExprS ast
    (numS  (n)     (list (eqCon (tExp ast) (tNum))))
    (boolS (b)     (list (eqCon (tExp ast) (tBool))))
    (temptyS ()    (list (eqCon (tExp ast) (tList (tVar '_a)))))
    (plusS (a b)   (tripend (bc a) (bc b) (list (eqCon (tExp a) (tNum)) (eqCon (tExp b) (tNum)) (eqCon (tExp ast) (tNum)))))
    (multS (a b)   (tripend (bc a) (bc b) (list (eqCon (tExp a) (tNum)) (eqCon (tExp b) (tNum)) (eqCon (tExp ast) (tNum)))))
    (bminusS (a b) (tripend (bc a) (bc b) (list (eqCon (tExp a) (tNum)) (eqCon (tExp b) (tNum)) (eqCon (tExp ast) (tNum)))))
    (iszeroS (a)   (append (bc a) (list (eqCon (tExp ast) (tBool)) (eqCon (tExp a) (tNum)))))
    (tisEmptyS (a) (append (bc a) (list (eqCon (tExp ast) (tBool)) (eqCon (tExp a) (tList (tVar '_a))))))
    (tconsS (e l)  (tripend (bc e) (bc l) (list (eqCon (tExp l) (tList (tExp e))) (eqCon (tExp ast) (tList (tExp e))))))
    (bifS (c t f)  (quapend (bc c) (bc t) (bc f) (list (eqCon (tExp c) (tBool)) (eqCon (tExp t) (tExp f)) (eqCon (tExp ast) (tExp t)))))
    (tfirstS (l)   (append (bc l) (let ((id (gensym 't))) (list (eqCon (tExp ast) (tVar id)) (eqCon (tExp l) (tList (tVar id)))))))
    (trestS (l)    (append (bc l) (let ((id (gensym 't))) (list (eqCon (tExp ast) (tList (tVar id))) (eqCon (tExp l) (tList (tVar id)))))))
    (appS (f a)    (tripend (bc f) (bc a) (list (eqCon (tExp f) (tArrow (tExp a) (tExp ast))))))
    (withS (b t e) (tripend (bc t) (bc e) (list (eqCon (tExp ast) (tExp e)) (eqCon (tVar b) (tExp t)))))
    (lamS (p b)    (cons (eqCon (tExp ast) (tArrow (tVar p) (tExp b))) (bc b)))
    (idS (n)       (list (eqCon (tExp ast) (tVar n))))
    (recS (b t e)  empty)))



(define (unify (stack : (listof Constraint)) (subst : (listof Constraint))) : (listof Constraint)
  (cond ((empty? stack) subst)
        ((cons? stack) (let ((current (first stack)) (stack (rest stack)))
                         (cond ((equal? (eqCon-lhs current) (eqCon-rhs current))
                                (unify stack (cons current subst)))
                               ((is-identifier? (eqCon-lhs current))
                                (let ((stack (replace-in-stack (eqCon-lhs current) (eqCon-rhs current) stack))
                                      (subst (replace-in-stack (eqCon-lhs current) (eqCon-rhs current) subst)))
                                  (unify stack (cons current subst))))
                               ((is-identifier? (eqCon-rhs current))
                                (let ((stack (replace-in-stack (eqCon-rhs current) (eqCon-lhs current) stack))
                                      (subst (replace-in-stack (eqCon-rhs current) (eqCon-lhs current) subst)))
                                  (unify stack (cons current subst))))
                               ((matching-arity? current)
                                (let ((stack-additions (create-stack-additions current)))
                                  (let ((stack (append stack-additions stack)))
                                    (unify stack subst))))
                               (else (error 'not-implemented "lol")))))))
;; Constants:
;;   tNum, tBool, tList, tArrow
;;
;; Identifiers:
;;   tVar, tExp
(define (is-identifier? (t : Term)) : boolean
  (type-case Term t
    (tVar (s) true)
    (tExp (s) true)
    (else false)))

(define (is-fn? (t : Term)) : boolean
  (type-case Term t
    (tArrow (a b) true)
    (else false)))

(define (matching-arity? (c : Constraint)) : boolean
  (and (is-fn? (eqCon-lhs c))
       (is-fn? (eqCon-rhs c))))

(define (create-stack-additions (c : Constraint)) : (listof Constraint)
  (let ((X (eqCon-lhs c)) (Y (eqCon-rhs c)))
    (list (eqCon (tArrow-i X) (tArrow-i Y))
          (eqCon (tArrow-o X) (tArrow-o Y)))))
    

(define (replace-in-stack (from : Term) (to : Term) (st : (listof Constraint))) : (listof Constraint)
  (readable-map st (lambda (each)
                     (eqCon (replace-in-eqCon from to (eqCon-lhs each))
                            (replace-in-eqCon from to (eqCon-rhs each))))))

(define (replace-in-eqCon (from : Term) (to : Term) (of : Term)) : Term
  (cond ((equal? from of) to)
        (else (type-case Term of
                (tArrow (i o) (tArrow (replace-in-eqCon from to i) (replace-in-eqCon from to o))) ;; todo
                (tList  (e)   (tList (replace-in-eqCon from to e))) ;; todo
                (else of)))))

(define (find-in-constraints (con : (listof Constraint)) (search : ExprS)) : Term
  (let ((matching (filter (lambda (x) (contains-exprs x search)) con)))
    (cond ((empty? matching) (error 'no-matches "it seems that failed, sorry"))
          ((cons? matching) (let ((exp (first matching)))
                              (let ((rhs (eqCon-rhs exp)) (lhs (eqCon-lhs exp)))
                                (cond ((is-expr rhs search) lhs)
                                      ((is-expr lhs search) rhs)
                                      (else (error '??? "how did you even get here???")))))))))

(define (contains-exprs (con : Constraint) (search : ExprS)) : boolean
  (or (is-expr (eqCon-lhs con) search)
      (is-expr (eqCon-rhs con) search)))
           
(define (is-expr (t : Term) (s : ExprS)) : boolean
  (type-case Term t
    (tExp (exp) (equal? exp s))
    (else false)))

(define (symlen (s : symbol)) : number
  (string-length (symbol->string s)))

(define (get-ugly-vars (t : Type)) : (listof symbol)
  (type-case Type t
    (tlistT (e) (get-ugly-vars e))
    (funT (a t) (append (get-ugly-vars a) (get-ugly-vars t)))
    (varT (n)   (cond ((> (symlen n) 1) (list n))))
    (else empty)))

(define (remove-dups from)
  (cond ((empty? from) empty)
        ((cons? from) (let ((f (first from)) (r (rest from)))
                        (let ((r (filter (λ (x) (not (equal? x f))) r)))
                          (cons f (remove-dups r)))))))

(define (match-sym (bad : (listof symbol)) (good : (listof symbol))) : (listof Rebinding)
  (cond ((empty? bad) empty)
        ((cons? bad)  (cons (rebind (first bad) (first good))
                            (match-sym (rest bad) (rest good))))))

(define (rebind-ugly (t : Type) (with : (listof Rebinding))) : Type
  (type-case Type t
    (numT ()  (numT))
    (boolT () (boolT))
    (tlistT (e) (tlistT (rebind-ugly e with)))
    (funT (a t) (funT (rebind-ugly a with) (rebind-ugly t with)))
    (varT (n)   (varT (lookup n with)))))

(define (beautify-type (t : Type)) : Type
  (rebind-ugly t (match-sym (remove-dups (get-ugly-vars t)) PRETTY)))
  

   


;;(define (run (e : s-expression)) : string
;;  (t->s (unify (gc e) empty)))

(define (gc (e : s-expression)) : (listof Constraint)
  (bc (make-unique (parse e) empty)))

(define (ru (e : s-expression))
  (let ((utree (make-unique (parse e) empty)))
    (t->t (find-in-constraints (unify (bc utree) empty) utree))))


  

(define (t->t (t : Term)) : Type
  (type-case Term t
    (tNum ()      (numT))
    (tBool ()     (boolT))
    (tList (t)    (tlistT (t->t t)))
    (tVar (s)     (varT s))
    (tArrow (i o) (funT (t->t i) (t->t o))) 
    (tExp (e)     (varT 'not-implemented))))

(define (t->s (t : Type)) : string
  (type-case Type t
    (numT () "num")
    (boolT () "bool")
    (tlistT (e) (strcomb (list "[" (t->s e) "]")))
    (funT (a t) (strcomb (list (t->s a) " -> " (t->s t)))) 
    (varT (n)   (string-append "_" (symbol->string n)))))

(define (strcomb (l : (listof string))) : string
  (foldr string-append "" l))




(define demo (list
 (eqCon (tVar 'two)   (tArrow (tVar 'three) (tVar 'one)))
 (eqCon (tVar 'two)   (tArrow (tVar '_x) (tVar '_x)))
 (eqCon (tVar 'three) (tNum))))